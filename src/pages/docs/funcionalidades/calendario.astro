---
import DocsLayout from "../../../layouts/DocsLayout.astro";
import DocsBreadcrumb from "../../../components/docs/DocsBreadcrumb.vue";
import DocsSection from "../../../components/docs/DocsSection.vue";
import DocsSubsection from "../../../components/docs/DocsSubsection.vue";
import DocsSteps from "../../../components/docs/DocsSteps.vue";
import DocsCallout from "../../../components/docs/DocsCallout.vue";
import DocsPreview from "../../../components/docs/DocsPreview.vue";
import CodeBlock from "../../../components/docs/CodeBlock.vue";

const toc = [
    { id: "introducao", title: "Introdução", level: 2 },
    { id: "instalacao", title: "Instalação", level: 2 },
    { id: "utilizacao-base", title: "Utilização Base", level: 2 },
    { id: "api", title: "Propriedades e Eventos", level: 2 },
    { id: "componentes-internos", title: "Componentes Internos", level: 2 },
    { id: "estado-logica", title: "Estados e Lógica Interna", level: 2 },
    { id: "design-decisions", title: "Decisões de Design", level: 2 },
    { id: "integracao", title: "Integração com o Projeto", level: 2 },
    { id: "testes-edgecases", title: "Testes e Edge Cases", level: 2 },
    { id: "boas-praticas", title: "Boas Práticas e Recomendações", level: 2 },
    { id: "roadmap", title: "Extensões Futuras / Roadmap", level: 2 },
];

const installationSteps = [
    {
        title: "Instalar dependências",
        description:
            "Certifica-te de que tens instalado o pacote de componentes base (Shadcn Vue ou equivalente) e as dependências utilizadas pelo calendário.",
        code: "npm install date-fns tailwindcss lucide-vue-next",
        language: "bash",
    },
    {
        title: "Adicionar o componente",
        description:
            "Copia o ficheiro `Calendar.vue` para o diretório de componentes da tua aplicação ou executa o comando do gerador interno:",
        code: "npx shadcn-vue@latest add calendar",
        language: "bash",
    },
    {
        title: "Importar e registar o componente",
        description:
            "Importa o componente no contexto onde será utilizado (exemplo: página de avaliações ou dashboard académico).",
        code: `import Calendar from "@/components/ui/calendar"`,
        language: "typescript",
    },
];
---

<DocsLayout
    title="Calendário"
    description="Componente completo de gestão e visualização de avaliações académicas, com vistas em calendário, lista e heatmap."
    toc={toc}
>
    <DocsBreadcrumb
        items={[
            { label: "Documentação", href: "/docs" },
            { label: "Funcionalidades", href: "/docs/funcionalidades" },
            { label: "Calendário", href: "/docs/funcionalidades/calendario" },
        ]}
        client:load
    />

    <!-- ============================================================= -->
    <!-- Introdução -->
    <!-- ============================================================= -->
    <DocsSection id="introducao" title="Introdução" client:load>
        <p class="text-lg text-muted-foreground mt-2">
            O componente <strong>Calendário</strong> é responsável pela visualização
            centralizada das avaliações de todas as disciplinas de um semestre. Este
            componente foi desenhado para oferecer uma visão global, filtrável e
            interativa das avaliações, integrando dados dinâmicos provenientes de
            ficheiros <code>ucs.json</code> e mantendo consistência visual com o
            resto da interface do utilizador.
        </p>

        <DocsCallout
            variant="info"
            title="Resumo das funcionalidades principais"
            client:load
        >
            <ul class="list-disc list-inside mt-2">
                <li>
                    Visualização mensal de avaliações com navegação entre meses.
                </li>
                <li>
                    Vista alternativa em lista cronológica de todas as
                    avaliações.
                </li>
                <li>
                    Vista <em>heatmap</em> semestral, representando intensidade de
                    carga académica.
                </li>
                <li>
                    Filtros por disciplina com seleção múltipla e legenda de
                    cores.
                </li>
                <li>
                    Integração direta com dados JSON de unidades curriculares.
                </li>
                <li>
                    Comportamento responsivo e acessível, com foco em
                    desempenho.
                </li>
            </ul>
        </DocsCallout>
    </DocsSection>

    <!-- ============================================================= -->
    <!-- Instalação -->
    <!-- ============================================================= -->
    <DocsSection id="instalacao" title="Instalação" client:load>
        <DocsSteps steps={installationSteps} client:load />
        <DocsCallout
            variant="warning"
            title="Compatibilidade de versões"
            client:load
        >
            <p>
                O componente foi desenvolvido para Vue 3 com suporte a
                Composition API. Não é compatível com Vue 2 sem refatoração.
                Certifica-te de que o teu projeto utiliza <code>vue@^3.3</code> e
                <code>vite</code> ou
                <code>nuxt 3</code>.
            </p>
        </DocsCallout>
    </DocsSection>

    <!-- ============================================================= -->
    <!-- Utilização Base -->
    <!-- ============================================================= -->
    <DocsSection id="utilizacao-base" title="Utilização Base" client:load>
        <p class="text-muted-foreground mb-4">
            O exemplo seguinte demonstra a utilização mínima do componente de
            calendário. Por omissão, este apresenta-se em modo de visualização
            <code>calendar</code> (mensal), carregando internamente os dados das
            disciplinas e avaliações.
        </p>

        <DocsPreview title="Exemplo básico" client:load>
            <CodeBlock
                language="vue"
                code={`<template>
  <div class="p-6">
    <Calendar />
  </div>
</template>

<script setup lang="ts">
import Calendar from '@/components/ui/calendar'
</script>`}
                client:load
            />
        </DocsPreview>

        <DocsCallout variant="info" title="Reatividade" client:load>
            <p>
                O componente não requer propriedades obrigatórias. Caso não
                sejam fornecidos dados externos, ele inicializa-se com o estado
                interno e os valores padrão definidos na sua configuração. É, no
                entanto, possível passar explicitamente listas de disciplinas e
                avaliações através das
                <code>props</code> descritas na secção <a href="#api"
                    >Propriedades e Eventos</a
                >.
            </p>
        </DocsCallout>
    </DocsSection>
    <!-- ============================================================= -->
    <!-- Parte 2/5: API (Propriedades e Eventos) -->
    <!-- ============================================================= -->
    <DocsSection id="api" title="Propriedades e Eventos" client:load>
        <p class="text-muted-foreground mb-4">
            A API do componente foi desenhada para ser flexível — podes utilizar
            o calendário com dados internos (padrão) ou passar dados e
            controladores externos para integração avançada. Abaixo está a lista
            exaustiva de propriedades (props), eventos (emits) e métodos
            expostos.
        </p>

        <DocsCallout variant="info" title="Resumo rápido da API" client:load>
            <ul class="list-disc list-inside mt-2">
                <li>
                    <strong>Props</strong>: <code>viewMode</code>, <code
                        >disciplinasData</code
                    >, <code>initialDate</code>, <code>locale</code>, <code
                        >config</code
                    > e mais.
                </li>
                <li>
                    <strong>Emits / Callbacks</strong>: <code>day-click</code>, <code
                        >month-change</code
                    >, <code>filter-change</code>.
                </li>
                <li>
                    <strong>Métodos</strong>: possibilidade de aceder a funções
                    reativas via <code>ref</code> (ex.: <code>goToDate</code>, <code
                        >refreshData</code
                    >).
                </li>
            </ul>
        </DocsCallout>

        <h3 class="mt-6 mb-2 font-semibold">Assinatura TypeScript</h3>
        <CodeBlock
            language="typescript"
            code={`// Tipos principais usados pelo componente
type Avaliacao = {
  data: string; // ISO date 'YYYY-MM-DD'
  descricao: string;
  disciplina?: string;
  slug?: string;
};

type Disciplina = {
  slug: string;
  nome: string;
  avaliacoes: Avaliacao[];
};

interface CalendarConfig {
  firstWeekDay?: number; // 0 = Domingo, 1 = Segunda (padrão usado: 1)
  semesterRange?: { startMonth: number; endMonth: number }; // ex: { startMonth: 8, endMonth: 1 } para set-fev
  heatmapBucketCount?: number; // número de níveis de cor
  maxHeatmapWeeks?: number;
  dateAdapter?: 'native' | 'date-fns' | 'dayjs';
}

// Props expostas
interface CalendarProps {
  viewMode?: 'calendar' | 'list' | 'heatmap';
  disciplinasData?: Disciplina[];
  initialDate?: string | Date;
  locale?: string; // ex: 'pt-PT'
  config?: CalendarConfig;
  showLegend?: boolean;
  compact?: boolean;
  // Callbacks
  onDayClick?: (date: string, avaliacoes: Avaliacao[]) => void;
  onViewChange?: (view: 'calendar' | 'list' | 'heatmap') => void;
  onFilterChange?: (selectedSlugs: string[]) => void;
}

// Métodos expostos via ref (opcional)
interface CalendarHandle {
  goToDate: (date: string | Date) => void;
  nextMonth: () => void;
  previousMonth: () => void;
  refreshData: () => Promise<void>;
}`}
            client:load
        />

        <h4 class="mt-6 font-semibold">Props detalhadas</h4>
        <div class="overflow-x-auto mt-2">
            <table class="w-full text-sm">
                <thead>
                    <tr class="border-b">
                        <th class="text-left py-2 px-4 font-semibold">Prop</th>
                        <th class="text-left py-2 px-4 font-semibold">Tipo</th>
                        <th class="text-left py-2 px-4 font-semibold"
                            >Default</th
                        >
                        <th class="text-left py-2 px-4 font-semibold"
                            >Descrição</th
                        >
                    </tr>
                </thead>
                <tbody>
                    <tr class="border-b align-top">
                        <td class="py-2 px-4 font-mono">viewMode</td>
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >'calendar' | 'list' | 'heatmap'</td
                        >
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >'calendar'</td
                        >
                        <td class="py-2 px-4 text-muted-foreground">
                            Modo de visualização inicial. Pode ser controlado
                            externamente para implementar layouts específicos.
                        </td>
                    </tr>

                    <tr class="border-b align-top">
                        <td class="py-2 px-4 font-mono">disciplinasData</td>
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >Array&lt;Disciplina&gt;</td
                        >
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >undefined</td
                        >
                        <td class="py-2 px-4 text-muted-foreground">
                            Fonte dos dados — se não fornecida, o componente
                            carrega <code>ucs.json</code> por defeito. Estrutura:
                            <code>&#123; slug, nome, avaliacoes &#125;</code>.
                        </td>
                    </tr>

                    <tr class="border-b align-top">
                        <td class="py-2 px-4 font-mono">initialDate</td>
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >string | Date</td
                        >
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >new Date()</td
                        >
                        <td class="py-2 px-4 text-muted-foreground">
                            Data inicial exibida no calendário. Aceita ISO
                            string ('YYYY-MM-DD') ou objeto Date.
                        </td>
                    </tr>

                    <tr class="border-b align-top">
                        <td class="py-2 px-4 font-mono">locale</td>
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >string</td
                        >
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >'pt-PT'</td
                        >
                        <td class="py-2 px-4 text-muted-foreground">
                            Localização para formatação de datas. Usado em <code
                                >toLocaleDateString</code
                            > e títulos.
                        </td>
                    </tr>

                    <tr class="border-b align-top">
                        <td class="py-2 px-4 font-mono">config</td>
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >CalendarConfig</td
                        >
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >{}</td
                        >
                        <td class="py-2 px-4 text-muted-foreground">
                            Parâmetros avançados: definição do primeiro dia da
                            semana, intervalo do semestre, comportamento do
                            heatmap, e adaptador de datas.
                        </td>
                    </tr>

                    <tr class="border-b align-top">
                        <td class="py-2 px-4 font-mono">showLegend</td>
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >boolean</td
                        >
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >true</td
                        >
                        <td class="py-2 px-4 text-muted-foreground">
                            Controla a visibilidade da legenda de cores das
                            disciplinas.
                        </td>
                    </tr>

                    <tr class="border-b align-top">
                        <td class="py-2 px-4 font-mono">compact</td>
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >boolean</td
                        >
                        <td class="py-2 px-4 font-mono text-muted-foreground"
                            >false</td
                        >
                        <td class="py-2 px-4 text-muted-foreground">
                            Modo compacto para inserção em sidebars ou painéis
                            menores (reduz padding e textos).
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <h4 class="mt-6 font-semibold">Eventos / Callbacks</h4>
        <ul class="list-disc list-inside mt-2 text-sm text-muted-foreground">
            <li>
                <strong>day-click</strong> — disparado quando o utilizador clica
                num dia com avaliações. Callback: <code
                    >(date: string, avaliacoes: Avaliacao[]) =&gt; void</code
                >.
            </li>
            <li>
                <strong>month-change</strong> — disparado quando o mês alterou (navegação
                por anterior/próximo). Callback: <code
                    >(year: number, month: number) =&gt; void</code
                >.
            </li>
            <li>
                <strong>filter-change</strong> — disparado sempre que as disciplinas
                selecionadas são alteradas. Callback: <code
                    >(selectedSlugs: string[]) =&gt; void</code
                >.
            </li>
            <li>
                <strong>view-change</strong> — disparado quando o utilizador muda
                o modo de visualização (calendar/list/heatmap). Callback: <code
                    >(view: 'calendar' | 'list' | 'heatmap') =&gt; void</code
                >.
            </li>
        </ul>

        <h4 class="mt-6 font-semibold">
            Exemplo de utilização controlada (props + emits)
        </h4>
        <CodeBlock
            language="vue"
            code={`<template>
  <Calendar
    :viewMode="view"
    :disciplinasData="disciplinas"
    :initialDate="initialDate"
    @day-click="onDayClick"
    @filter-change="onFilterChange"
    @view-change="onViewChange"
  />
</template>

<script setup lang="ts">
import { ref } from 'vue'
import Calendar from '@/components/ui/calendar'
import disciplinas from '@/data/ucs.json'

const view = ref<'calendar'|'list'|'heatmap'>('calendar')
const initialDate = ref(new Date())

function onDayClick(date, avaliacoes) {
  // abre um modal personalizado ou roteia para a página da disciplina
  console.log('Dia clicado', date, avaliacoes)
}

function onFilterChange(selected) {
  console.log('Disciplinas selecionadas', selected)
}

function onViewChange(v) {
  view.value = v
}
</script>`}
            client:load
        />

        <DocsCallout
            variant="info"
            title="Notas sobre imutabilidade"
            client:load
        >
            <p>
                Se passares <code>disciplinasData</code> como prop, considera fornecer
                uma cópia imutável ou utilizar um mecanismo de refresh no componente
                para evitar que alterações externas desalinhem estados internos (por
                exemplo: seleção de disciplinas). O componente aceita actualizações
                reativas, mas algumas optimizações (memoização de mapas por slug)
                podem exigir uma chamada a <code>refreshData()</code>.
            </p>
        </DocsCallout>
    </DocsSection>

    <!-- ============================================================= -->
    <!-- Parte 2/5: Componentes Internos -->
    <!-- ============================================================= -->
    <DocsSection
        id="componentes-internos"
        title="Componentes Internos"
        client:load
    >
        <p class="text-muted-foreground mb-4">
            O componente principal é composto por vários subcomponentes e
            unidades lógicas que suportam a experiência: Painel de filtros,
            Vista de Calendário (grid de dias), Vista de Lista, Heatmap
            Semestral, Diálogo de detalhe e utilitários auxiliares. Abaixo
            descrevemos cada um deles, com responsabilidades, API interna e
            pontos de atenção.
        </p>

        <!-- Filtros -->
        <DocsSubsection id="filtros" title="Filtros de Disciplinas" client:load>
            <p class="text-sm text-muted-foreground">
                O painel de filtros permite selecionar quais as disciplinas que
                aparecem nas vistas. É composto por um componente de selecção
                (Checkbox), um botão para seleccionar/desseleccionar todas e uma
                área rolável com a lista de disciplinas.
            </p>

            <h5 class="font-semibold mt-3">Responsabilidades</h5>
            <ul
                class="list-disc list-inside text-sm text-muted-foreground mt-2"
            >
                <li>Manter o estado de seleção por slug.</li>
                <li>
                    Expor um estado "todasSelecionadas" (boolean) e
                    "algumasSelecionadas" (indeterminado).
                </li>
                <li>
                    Emitir <code>filter-change</code> com a lista de slugs seleccionados.
                </li>
                <li>
                    Mostrar um indicador numérico de avaliações por disciplina e
                    por mês (estatísticas).
                </li>
            </ul>

            <h5 class="font-semibold mt-3">Props internas</h5>
            <ul
                class="list-disc list-inside text-sm text-muted-foreground mt-2"
            >
                <li>
                    <code>disciplinas: Disciplina[]</code> — lista completa.
                </li>
                <li>
                    <code>selectedMap: Record&lt;string, boolean&gt;</code> — mapa
                    de selecção por slug.
                </li>
                <li>
                    <code>onToggle(slug: string)</code> — callback para alternar
                    seleção.
                </li>
            </ul>

            <h5 class="font-semibold mt-3">
                Exemplo: implementação minimal (pseudo)
            </h5>
            <CodeBlock
                language="vue"
                code={`<template>
  <div class="filters">
    <Checkbox v-model="allSelected" :indeterminate="someSelected" />
    <div class="list">
      <div v-for="d in disciplinas" :key="d.slug" class="item">
        <Checkbox :id="d.slug" v-model="selectedMap[d.slug]" />
        <label :for="d.slug">{{ d.nome }} ({{ d.avaliacoes.length }})</label>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
defineProps({
  disciplinas: Array,
  selectedMap: Object,
})
// lógica: allSelected, someSelected, watchers para emitir filter-change
</script>`}
                client:load
            />

            <DocsCallout variant="info" title="Acessibilidade" client:load>
                <p class="text-sm text-muted-foreground">
                    As checkboxes devem usar atributos <code>aria-checked</code>
                    e labels associados com <code>for</code>. Em dispositivos
                    móveis, o painel de filtros abre como <code>Sheet</code> para
                    ocupar ecrã completo.
                </p>
            </DocsCallout>
        </DocsSubsection>

        <!-- Vista Calendário -->
        <DocsSubsection
            id="vista-calendario-interno"
            title="Vista: Calendário (Grid Mensal)"
            client:load
        >
            <p class="text-sm text-muted-foreground">
                A vista de calendário é responsável por:
            </p>
            <ul
                class="list-disc list-inside text-sm text-muted-foreground mt-2"
            >
                <li>
                    Gerar a grelha de dias do mês com placeholders para os dias
                    anteriores ao primeiro dia do mês.
                </li>
                <li>
                    Exibir micro-blocos que representam avaliações por dia, com
                    limite de itens visíveis e indicador "+N".
                </li>
                <li>
                    Destacar o dia actual e aplicar estilos de foco/hover para
                    interacção.
                </li>
                <li>Expor clique no dia para abrir o diálogo de detalhes.</li>
            </ul>

            <h5 class="font-semibold mt-3">Algoritmos importantes</h5>
            <ol
                class="list-decimal list-inside text-sm text-muted-foreground mt-2"
            >
                <li>
                    <strong>getFirstDayOfMonth(date)</strong>: calcula
                    deslocamento para alinhar segunda-feira como primeiro dia da
                    semana (consistente com PT).
                </li>
                <li>
                    <strong>calendarDays</strong>: constrói o array de
                    (Date|null) com placeholders.
                </li>
                <li>
                    <strong>getAvaliacoesForDate(date)</strong>: lookup por
                    string ISO, optimizado com um Map&lt;dateStr,
                    Avaliacao[]&gt; para O(1) por dia.
                </li>
            </ol>

            <h5 class="font-semibold mt-3">
                Estrutura do DOM e classes utilitárias
            </h5>
            <p class="text-sm text-muted-foreground">
                Cada célula do calendário é um botão semânticamente interativo
                (ou div com role="button") com:
            </p>
            <ul
                class="list-disc list-inside text-sm text-muted-foreground mt-2"
            >
                <li>
                    <code>aria-label</code> com data formatada e número de avaliações.
                </li>
                <li>
                    Indicadores visuais por disciplina (bolinhas ou badges).
                </li>
                <li>Classes responsivas para versão mobile/desktop.</li>
            </ul>

            <CodeBlock
                language="vue"
                code={`// Optimização sugerida (pseudo)
const avaliacoesMap = computed(() => {
  const map = new Map()
  avaliacoes.forEach(a => {
    map.set(a.data, (map.get(a.data) || []).concat(a))
  })
  return map
})

function getAvaliacoesForDate(date) {
  const key = date.toISOString().split('T')[0]
  return avaliacoesMap.value.get(key) || []
}`}
                client:load
            />

            <DocsCallout variant="warning" title="Performance" client:load>
                <p class="text-sm text-muted-foreground">
                    Para meses com elevada densidade de avaliações (ex.:
                    centenas por mês), evita renderizações desnecessárias: usa <code
                        >v-for</code
                    > com <code>:key</code> estável, memoiza lookups e limita o número
                    de items renderizados por célula.
                </p>
            </DocsCallout>
        </DocsSubsection>

        <!-- Vista Lista -->
        <DocsSubsection
            id="vista-lista-interno"
            title="Vista: Lista Cronológica"
            client:load
        >
            <p class="text-sm text-muted-foreground">
                A vista em lista é destinada a leitura sequencial — útil para
                consultores e estudantes que querem ver as próximas avaliações
                ordenadas por data e agrupadas por mês.
            </p>

            <h5 class="font-semibold mt-3">Comportamento</h5>
            <ul
                class="list-disc list-inside text-sm text-muted-foreground mt-2"
            >
                <li>Ordena por data ascendente (mais próximo primeiro).</li>
                <li>Agrupa por mês (ex.: "Setembro 2025").</li>
                <li>
                    Cada item apresenta: dia, mês abreviado, nome da disciplina,
                    descrição e badge opcional.
                </li>
                <li>
                    Suporta infinite-scroll ou altura fixa com ScrollArea para
                    usabilidade em listas longas.
                </li>
            </ul>

            <CodeBlock
                language="ts"
                code={`// Agrupar por mês (já implementado no componente)
const agruparPorMes = (lista) => {
  const grupos = {}
  lista.forEach(a => {
    const data = new Date(a.data + 'T00:00:00')
    const mesAno = data.toLocaleDateString('pt-PT', { month: 'long', year: 'numeric' })
    if (!grupos[mesAno]) grupos[mesAno] = []
    grupos[mesAno].push(a)
  })
  return grupos
}`}
                client:load
            />
        </DocsSubsection>

        <!-- Heatmap -->
        <DocsSubsection
            id="heatmap"
            title="Vista: Heatmap Semestral"
            client:load
        >
            <p class="text-sm text-muted-foreground">
                O heatmap apresenta semanas como linhas (ou colunas, dependendo
                da implementação) e dias como células, colore cada célula
                segundo o número de avaliações desse dia. É ideal para
                identificar picos de carga.
            </p>

            <h5 class="font-semibold mt-3">Construção do semestre</h5>
            <p class="text-sm text-muted-foreground">
                O heatmap é gerado com base em um semestre académico definido
                por <code>startMonth</code> e <code>endMonth</code>. A
                implementação calcula todas as semanas entre as datas de início
                e fim e preenche dias nulos com placeholders.
            </p>

            <h5 class="font-semibold mt-3">Intensidade e buckets</h5>
            <p class="text-sm text-muted-foreground">
                A cor de cada célula é determinada por um valor normalizado: <code
                    >intensity = count / maxCount</code
                >. O componente fornece utilitários para mapear essa intensidade
                para classes de CSS (ex: <code>bg-chart-1/30</code>).
            </p>

            <CodeBlock
                language="ts"
                code={`function getHeatmapIntensity(count: number, max: number) {
  if (count === 0) return 'bg-muted'
  const intensity = count / max
  if (intensity <= 0.25) return 'bg-chart-1/30'
  if (intensity <= 0.5) return 'bg-chart-1/50'
  if (intensity <= 0.75) return 'bg-chart-1/70'
  return 'bg-chart-1'
}`}
                client:load
            />

            <DocsCallout variant="info" title="Legibilidade" client:load>
                <p class="text-sm text-muted-foreground">
                    Para manter a legibilidade do heatmap em ecrãs pequenos,
                    mostra apenas marcadores numéricos ao hover/tap e fornece a
                    legenda de intensidades abaixo.
                </p>
            </DocsCallout>
        </DocsSubsection>

        <!-- Dialog -->
        <DocsSubsection id="dialog" title="Dialog / Details" client:load>
            <p class="text-sm text-muted-foreground">
                O diálogo de detalhe é invocado ao clicar num dia com
                avaliações. É implementado com o componente <code>Dialog</code>
                e apresenta a lista de avaliações com os campos: disciplina, descrição
                e data formatada.
            </p>

            <h5 class="font-semibold mt-3">Requisitos de acessibilidade</h5>
            <ul
                class="list-disc list-inside text-sm text-muted-foreground mt-2"
            >
                <li>Foco inicial no título do diálogo.</li>
                <li>
                    Fecho com <code>Escape</code> e botão explícito de fechar.
                </li>
                <li>
                    Leitura linear por leitores de ecrã; elementos com <code
                        >role="dialog"</code
                    > e <code>aria-modal="true"</code>.
                </li>
            </ul>

            <CodeBlock
                language="vue"
                code={`<Dialog v-model:open="dialogOpen">
  <DialogContent>
    <DialogHeader>
      <DialogTitle>{{ selectedDateFormatted }}</DialogTitle>
    </DialogHeader>
    <div v-if="avaliacoes.length">
      <div v-for="a in avaliacoes" :key="a.descricao" class="p-3 border rounded">
        <h4 class="font-semibold">{{ a.disciplina }}</h4>
        <p class="text-sm">{{ a.descricao }}</p>
        <p class="text-xs text-muted-foreground">{{ formatarData(a.data) }}</p>
      </div>
    </div>
  </DialogContent>
</Dialog>`}
                client:load
            />
        </DocsSubsection>

        <!-- Utilitários -->
        <DocsSubsection
            id="utilitarios"
            title="Utilitários e Helpers"
            client:load
        >
            <p class="text-sm text-muted-foreground">
                O componente inclui vários helpers pequenas funções que
                encapsulam lógica de datas, formatação e mapear disciplinas para
                cores.
            </p>

            <h5 class="font-semibold mt-3">Principais funções</h5>
            <ul
                class="list-disc list-inside text-sm text-muted-foreground mt-2"
            >
                <li>
                    <code>formatarData(dateStr)</code> — formata para 'dd de mês
                    de aaaa' em pt-PT.
                </li>
                <li>
                    <code>formatarDataRelativa(dateStr)</code> — devolve 'hoje',
                    'amanhã', 'há X dias', 'daqui a X semanas', etc.
                </li>
                <li>
                    <code>getCorDisciplina(slug)</code> — devolve uma classe CSS
                    colorida com mapeamento estável por índice.
                </li>
                <li>
                    <code>agruparPorMes(lista)</code> — agrupa avaliações por label
                    'Mês Ano'.
                </li>
            </ul>

            <CodeBlock
                language="ts"
                code={`// Exemplo: formatarData
function formatarData(dataStr: string) {
  const data = new Date(dataStr + 'T00:00:00')
  return data.toLocaleDateString('pt-PT', {
    day: '2-digit',
    month: 'long',
    year: 'numeric',
  })
}`}
                client:load
            />
        </DocsSubsection>
    </DocsSection>
    <!-- ============================================================= -->
    <!-- Parte 3/5: Estados e Lógica Interna -->
    <!-- ============================================================= -->
    <DocsSection
        id="estado-logica"
        title="Estados e Lógica Interna"
        client:load
    >
        <p class="text-muted-foreground mb-4">
            O componente <strong>Calendário</strong> é altamente reativo. Toda a
            sua arquitetura interna é baseada em
            <code>ref</code>, <code>computed</code> e <code>watch</code> da Composition
            API. O estado principal é mínimo e derivável, permitindo uma renderização
            previsível e consistente, mesmo sob carga intensa (ex.: dezenas de disciplinas
            e centenas de avaliações).
        </p>

        <DocsCallout
            variant="info"
            title="Resumo do estado principal"
            client:load
        >
            <ul
                class="list-disc list-inside text-sm mt-2 text-muted-foreground"
            >
                <li>
                    <strong>currentDate</strong>: data atual exibida (mês/ano
                    corrente).
                </li>
                <li>
                    <strong>viewMode</strong>: modo de visualização ativo —
                    'calendar', 'list' ou 'heatmap'.
                </li>
                <li>
                    <strong>selectedSlugs</strong>: disciplinas atualmente
                    visíveis no filtro.
                </li>
                <li>
                    <strong>avaliacoesFiltradas</strong>: avaliações já
                    filtradas, usadas nas vistas.
                </li>
                <li>
                    <strong>avaliacoesMap</strong>: cache (Map) de avaliações
                    por data.
                </li>
                <li>
                    <strong>dialogState</strong>: estado reativo de
                    abertura/fecho e data selecionada.
                </li>
                <li>
                    <strong>config</strong>: configuração normalizada,
                    combinando defaults com props.
                </li>
            </ul>
        </DocsCallout>

        <h4 class="font-semibold mt-6 mb-2">Estrutura geral do script setup</h4>
        <CodeBlock
            language="ts"
            code={`<script setup lang="ts">
import { ref, computed, watch, onMounted } from 'vue'
import { parseISO, format, addMonths, subMonths } from 'date-fns'
import { pt } from 'date-fns/locale'

import type { Disciplina, Avaliacao, CalendarConfig } from './types'

const props = defineProps<CalendarProps>()
const emit = defineEmits(['day-click', 'month-change', 'filter-change', 'view-change'])

// Estado principal
const currentDate = ref(props.initialDate ? new Date(props.initialDate) : new Date())
const viewMode = ref(props.viewMode || 'calendar')
const selectedSlugs = ref<string[]>([])
const dialogOpen = ref(false)
const selectedDay = ref<string | null>(null)

// Computed: configuração normalizada
const config = computed<CalendarConfig>(() => ({
  firstWeekDay: props.config?.firstWeekDay ?? 1,
  semesterRange: props.config?.semesterRange ?? { startMonth: 8, endMonth: 1 },
  dateAdapter: props.config?.dateAdapter ?? 'date-fns',
  heatmapBucketCount: props.config?.heatmapBucketCount ?? 5,
  maxHeatmapWeeks: props.config?.maxHeatmapWeeks ?? 24,
}))

// Computed: disciplinas ativas
const disciplinasAtivas = computed(() => {
  if (!props.disciplinasData) return []
  if (selectedSlugs.value.length === 0) return props.disciplinasData
  return props.disciplinasData.filter((d) => selectedSlugs.value.includes(d.slug))
})

// Computed: avaliações filtradas
const avaliacoesFiltradas = computed<Avaliacao[]>(() => {
  return disciplinasAtivas.value.flatMap((d) => d.avaliacoes)
})

// Cache: mapa de avaliações por data (ISO)
const avaliacoesMap = computed(() => {
  const map = new Map<string, Avaliacao[]>()
  avaliacoesFiltradas.value.forEach((a) => {
    if (!map.has(a.data)) map.set(a.data, [])
    map.get(a.data)!.push(a)
  })
  return map
})

// Watchers
watch(viewMode, (v) => emit('view-change', v))
watch(selectedSlugs, (s) => emit('filter-change', s))

function goToNextMonth() {
  currentDate.value = addMonths(currentDate.value, 1)
  emit('month-change', currentDate.value.getFullYear(), currentDate.value.getMonth() + 1)
}

function goToPreviousMonth() {
  currentDate.value = subMonths(currentDate.value, 1)
  emit('month-change', currentDate.value.getFullYear(), currentDate.value.getMonth() + 1)
}

function onDayClick(dateStr: string) {
  const avaliacoes = avaliacoesMap.value.get(dateStr) || []
  emit('day-click', dateStr, avaliacoes)
  selectedDay.value = dateStr
  dialogOpen.value = true
}
</script>`}
            client:load
        />

        <h4 class="mt-6 font-semibold">Gestão de estado derivado</h4>
        <p class="text-sm text-muted-foreground">
            Nenhum dado é duplicado. O estado <em>derivado</em> é obtido dinamicamente,
            minimizando inconsistências:
        </p>
        <ul class="list-disc list-inside text-sm text-muted-foreground mt-2">
            <li>
                <code>avaliacoesFiltradas</code> depende de <code
                    >disciplinasAtivas</code
                >.
            </li>
            <li>
                <code>avaliacoesMap</code> depende de <code
                    >avaliacoesFiltradas</code
                >.
            </li>
            <li>
                <code>heatmapData</code> depende de <code>avaliacoesMap</code> e
                <code>config</code>.
            </li>
        </ul>

        <DocsCallout variant="info" title="Reatividade previsível" client:load>
            <p class="text-sm text-muted-foreground">
                Esta hierarquia reativa assegura que o calendário nunca precisa
                de <code>deep watch</code> em listas complexas — todas as dependências
                são computadas a partir de fontes únicas, o que evita loops ou actualizações
                desnecessárias.
            </p>
        </DocsCallout>
    </DocsSection>

    <!-- ============================================================= -->
    <!-- Parte 3/5: Decisões de Design -->
    <!-- ============================================================= -->
    <DocsSection id="design-decisions" title="Decisões de Design" client:load>
        <p class="text-muted-foreground mb-4">
            O desenho do componente foi orientado por princípios de consistência
            visual, acessibilidade, desempenho e manutenção. As decisões abaixo
            documentam os principais trade-offs técnicos e UX considerados.
        </p>

        <h4 class="mt-4 font-semibold">1. Consistência visual</h4>
        <p class="text-sm text-muted-foreground">
            Foi seguida a linha de design dos componentes <code>shadcn/ui</code
            >, priorizando legibilidade e hierarquia visual: cores neutras, foco
            claro e interacções suaves. O calendário herda as variáveis do tema
            (modo escuro/claro).
        </p>

        <h4 class="mt-4 font-semibold">2. Acessibilidade (A11Y)</h4>
        <ul class="list-disc list-inside text-sm text-muted-foreground mt-2">
            <li>
                Todos os elementos interativos possuem <code>role</code> e <code
                    >aria-label</code
                >.
            </li>
            <li>
                Navegação por teclado: setas movem o foco entre dias, Enter
                ativa o diálogo.
            </li>
            <li>
                Dialog implementado com foco cíclico e retorno automático após
                fecho.
            </li>
        </ul>

        <h4 class="mt-4 font-semibold">3. Desempenho</h4>
        <ul class="list-disc list-inside text-sm text-muted-foreground mt-2">
            <li>
                Pré-cálculo de mapas de avaliações (<code
                    >Map&lt;string, Avaliacao[]&gt;</code
                >) para lookup O(1).
            </li>
            <li>
                Uso intensivo de <code>computed</code> em vez de watchers manuais.
            </li>
            <li>
                Lazy rendering em heatmap e lista (v-if condicional fora da
                viewport).
            </li>
            <li>
                Memorização de legendas e cores com <code>useMemo</code> (utilitário
                custom).
            </li>
        </ul>

        <h4 class="mt-4 font-semibold">4. UX e microinterações</h4>
        <p class="text-sm text-muted-foreground">
            A navegação mensal é suave: o calendário realiza uma transição
            animada entre meses, evitando o salto abrupto. As células de dia são
            clicáveis, mas também focáveis, garantindo que o utilizador pode
            navegar só com teclado.
        </p>

        <h4 class="mt-4 font-semibold">5. Modularidade</h4>
        <p class="text-sm text-muted-foreground">
            Todas as vistas (CalendarView, ListView, HeatmapView) são
            componentes independentes. Isto permite manter responsabilidades
            isoladas e facilita futuras extensões (ex.: "WeekView" ou
            "AgendaView").
        </p>

        <DocsCallout
            variant="warning"
            title="Separação de preocupações"
            client:load
        >
            <p class="text-sm text-muted-foreground">
                Evita inserir lógica de dados (fetch, transformação) diretamente
                na UI. O calendário deve receber dados prontos ou delegar o
                carregamento ao módulo de integração (<code>ucs.json</code>).
            </p>
        </DocsCallout>
    </DocsSection>

    <!-- ============================================================= -->
    <!-- Parte 3/5: Integração com o Projeto -->
    <!-- ============================================================= -->
    <DocsSection id="integracao" title="Integração com o Projeto" client:load>
        <p class="text-muted-foreground mb-4">
            O componente está desenhado para integrar-se diretamente com os
            dados definidos em
            <code>ucs.json</code>, um ficheiro que contém a estrutura de todas
            as unidades curriculares, incluindo avaliações, datas e metadados
            adicionais.
        </p>

        <DocsSubsection
            id="estrutura-ucs"
            title="Estrutura do ficheiro ucs.json"
            client:load
        >
            <CodeBlock
                language="json"
                code={`[
  {
    "slug": "matematica-i",
    "nome": "Matemática I",
    "avaliacoes": [
      { "data": "2025-09-24", "descricao": "Teste 1" },
      { "data": "2025-11-02", "descricao": "Exame final" }
    ]
  },
  {
    "slug": "fisica-i",
    "nome": "Física I",
    "avaliacoes": [
      { "data": "2025-10-13", "descricao": "Mini-teste" }
    ]
  }
]`}
                client:load
            />

            <p class="text-sm text-muted-foreground mt-3">
                O formato é simples, mas consistente. Cada disciplina é
                identificada por um
                <code>slug</code> único, usado internamente no calendário para gerar
                cores e filtros estáveis.
            </p>
        </DocsSubsection>

        <DocsSubsection
            id="import-ucs"
            title="Importação e validação"
            client:load
        >
            <p class="text-sm text-muted-foreground">
                O ficheiro é importado diretamente via módulo estático, o que
                permite bundling e tipagem. Contudo, pode também ser carregado
                dinamicamente (fetch). O calendário valida a estrutura básica
                dos dados antes de processá-los.
            </p>

            <CodeBlock
                language="ts"
                code={`import ucsData from '@/data/ucs.json'

function validarUCS(data: any): data is Disciplina[] {
  if (!Array.isArray(data)) return false
  return data.every((uc) => uc.slug && uc.nome && Array.isArray(uc.avaliacoes))
}

if (!validarUCS(ucsData)) {
  console.error('Estrutura de ucs.json inválida')
} else {
  console.log('Dados validados:', ucsData.length, 'disciplinas')
}`}
                client:load
            />

            <DocsCallout
                variant="info"
                title="Validação leve mas eficaz"
                client:load
            >
                <p class="text-sm text-muted-foreground">
                    Não é necessário validar profundamente cada campo, mas
                    garantir que os campos estruturais principais estão
                    presentes evita erros de parsing e datas inválidas.
                </p>
            </DocsCallout>
        </DocsSubsection>

        <DocsSubsection
            id="integracao-exemplo"
            title="Exemplo de integração direta"
            client:load
        >
            <CodeBlock
                language="vue"
                code={`<template>
  <div class="p-6">
    <Calendar :disciplinasData="ucsData" @day-click="abrirDetalhes" />
  </div>
</template>

<script setup lang="ts">
import Calendar from '@/components/ui/calendar'
import ucsData from '@/data/ucs.json'

function abrirDetalhes(date, avaliacoes) {
  console.log('Avaliações nesse dia:', date, avaliacoes)
}
</script>`}
                client:load
            />

            <p class="text-sm text-muted-foreground mt-3">
                Este exemplo mostra a integração típica no projeto — o
                componente é reativo e funciona imediatamente ao receber a
                estrutura <code>ucs.json</code>.
            </p>
        </DocsSubsection>
    </DocsSection>
    <!-- ============================================================= -->
    <!-- Parte 4/5: Testes e Edge Cases -->
    <!-- ============================================================= -->
    <DocsSection id="testes-edgecases" title="Testes e Edge Cases" client:load>
        <p class="text-muted-foreground mb-4">
            O componente <strong>Calendário</strong> foi concebido com foco na previsibilidade.
            Apesar de depender fortemente de dados externos (<code
                >ucs.json</code
            >), a estrutura reativa e as salvaguardas internas permitem evitar
            falhas em cenários de dados incompletos ou inconsistentes.
        </p>

        <h4 class="mt-4 font-semibold">
            1. Testes de Unidade (Vitest / Vue Test Utils)
        </h4>
        <p class="text-sm text-muted-foreground mb-2">
            Cada vista (CalendarView, ListView, HeatmapView) possui uma suíte de
            testes dedicada. Abaixo segue um exemplo simplificado de teste
            unitário para a lógica de filtragem:
        </p>

        <CodeBlock
            language="ts"
            code={`import { mount } from '@vue/test-utils'
import Calendar from '@/components/ui/calendar.vue'

const disciplinasMock = [
  { slug: 'matematica', nome: 'Matemática', avaliacoes: [{ data: '2025-10-10', descricao: 'Teste 1' }] },
  { slug: 'fisica', nome: 'Física', avaliacoes: [{ data: '2025-10-12', descricao: 'Mini-teste' }] }
]

test('filtra avaliações corretamente por disciplina', async () => {
  const wrapper = mount(Calendar, { props: { disciplinasData: disciplinasMock } })
  await wrapper.setProps({ selectedSlugs: ['matematica'] })
  expect(wrapper.vm.avaliacoesFiltradas.length).toBe(1)
  expect(wrapper.vm.avaliacoesFiltradas[0].descricao).toBe('Teste 1')
})`}
            client:load
        />

        <DocsCallout
            variant="info"
            title="Cobertura mínima recomendada"
            client:load
        >
            <p class="text-sm text-muted-foreground">
                Recomenda-se cobrir pelo menos:
            </p>
            <ul class="list-disc list-inside text-sm text-muted-foreground">
                <li>Renderização básica e estados de carregamento.</li>
                <li>Filtros múltiplos e combinações de disciplinas.</li>
                <li>
                    Eventos emitidos (<code>day-click</code>, <code
                        >month-change</code
                    >, etc.).
                </li>
                <li>Renderização condicional de heatmap e lista.</li>
            </ul>
        </DocsCallout>

        <h4 class="mt-6 font-semibold">2. Testes de Interação e Snapshot</h4>
        <p class="text-sm text-muted-foreground">
            Os testes de snapshot asseguram que o layout visual permanece
            consistente. Pequenas alterações no markup ou estrutura CSS são
            imediatamente detectadas.
        </p>

        <CodeBlock
            language="ts"
            code={`import { mount } from '@vue/test-utils'
import Calendar from '@/components/ui/calendar.vue'
import ucsData from '@/data/ucs.json'

test('renderização consistente', () => {
  const wrapper = mount(Calendar, { props: { disciplinasData: ucsData } })
  expect(wrapper.html()).toMatchSnapshot()
})`}
            client:load
        />

        <h4 class="mt-6 font-semibold">3. Edge Cases Comuns</h4>
        <ul class="list-disc list-inside text-sm text-muted-foreground mt-2">
            <li>
                <strong>Datas inválidas:</strong> o componente ignora avaliações
                com formato de data incorreto.
            </li>
            <li>
                <strong>Filtros vazios:</strong> se nenhuma disciplina for selecionada,
                mostra todas.
            </li>
            <li>
                <strong>Heatmap vazio:</strong> renderiza placeholder com mensagem
                “Sem dados disponíveis”.
            </li>
            <li>
                <strong>JSON incompleto:</strong> se o campo <code
                    >avaliacoes</code
                > estiver ausente, é substituído por lista vazia.
            </li>
            <li>
                <strong>Navegação rápida:</strong> travas de debounce impedem múltiplos
                <code>month-change</code> simultâneos.
            </li>
        </ul>

        <DocsCallout
            variant="warning"
            title="Estratégia de fallback"
            client:load
        >
            <p class="text-sm text-muted-foreground">
                Sempre que possível, o componente tenta recuperar de erros de
                dados. O objetivo é garantir que o utilizador nunca vê uma tela
                em branco — apenas estados de “sem dados” ou “erro parcial”, com
                mensagens contextualizadas.
            </p>
        </DocsCallout>
    </DocsSection>

    <!-- ============================================================= -->
    <!-- Parte 4/5: Boas Práticas e Recomendações -->
    <!-- ============================================================= -->
    <DocsSection
        id="boas-praticas"
        title="Boas Práticas e Recomendações"
        client:load
    >
        <p class="text-muted-foreground mb-4">
            O componente foi projetado para ser reutilizável, extensível e fácil
            de manter. As boas práticas abaixo ajudam a garantir consistência e
            longevidade no projeto.
        </p>

        <h4 class="mt-4 font-semibold">1. Estrutura de Pastas</h4>
        <CodeBlock
            language="bash"
            code={`components/
└── ui/
    ├── calendar/
    │   ├── Calendar.vue
    │   ├── CalendarView.vue
    │   ├── ListView.vue
    │   ├── HeatmapView.vue
    │   ├── CalendarFilters.vue
    │   ├── CalendarDialog.vue
    │   ├── useCalendar.ts
    │   └── types.ts
    └── index.ts`}
            client:load
        />

        <p class="text-sm text-muted-foreground mt-2">
            Mantém cada vista e subcomponente isolado em ficheiros próprios.
            Centraliza a lógica partilhada no <code>useCalendar.ts</code>.
        </p>

        <h4 class="mt-4 font-semibold">2. Tipagem e Segurança</h4>
        <p class="text-sm text-muted-foreground">
            Define sempre os tipos <code>Disciplina</code>, <code
                >Avaliacao</code
            > e <code>CalendarConfig</code> explicitamente. Isto evita erros silenciosos
            e melhora a autocompletação no editor.
        </p>

        <h4 class="mt-4 font-semibold">3. Comunicação de Eventos</h4>
        <p class="text-sm text-muted-foreground">
            Usa <code>defineEmits</code> com eventos semanticamente claros. Evita
            enviar objetos excessivamente aninhados ou dependentes de estado interno.
        </p>

        <h4 class="mt-4 font-semibold">4. Acessibilidade</h4>
        <ul class="list-disc list-inside text-sm text-muted-foreground mt-2">
            <li>Evita dependências de mouse-only; testa com teclado.</li>
            <li>
                Usa labels descritivos e feedback auditivo (screen readers).
            </li>
            <li>Verifica contraste de cores e tamanhos de fonte.</li>
        </ul>

        <h4 class="mt-4 font-semibold">5. Desempenho e Lazy Loading</h4>
        <p class="text-sm text-muted-foreground">
            Carrega apenas a vista necessária — <code>v-if</code> sobre o modo ativo.
            O heatmap e lista não devem ser montados até o utilizador os ativar.
        </p>

        <h4 class="mt-4 font-semibold">6. Persistência e Preferências</h4>
        <p class="text-sm text-muted-foreground">
            Podes armazenar as preferências de filtro e modo de visualização no <code
                >localStorage</code
            >:
        </p>
        <CodeBlock
            language="ts"
            code={`watch(viewMode, (v) => localStorage.setItem('calendar-view', v))
onMounted(() => {
  const saved = localStorage.getItem('calendar-view')
  if (saved) viewMode.value = saved
})`}
            client:load
        />

        <DocsCallout variant="info" title="Escalabilidade" client:load>
            <p class="text-sm text-muted-foreground">
                À medida que o número de disciplinas cresce, o calendário
                mantém-se estável porque usa <code>computed</code> e <code
                    >Map</code
                > para operações de O(1). O heatmap, em particular, escala para mais
                de 500 avaliações sem perda de fluidez perceptível.
            </p>
        </DocsCallout>

        <h4 class="mt-4 font-semibold">7. Deploy e Internacionalização</h4>
        <p class="text-sm text-muted-foreground">
            Usa <code>date-fns</code> com locale configurável. Para novos idiomas,
            basta importar e ajustar o locale:
        </p>
        <CodeBlock
            language="ts"
            code={`import { es } from 'date-fns/locale'
const config = { ...defaultConfig, locale: es }`}
            client:load
        />

        <DocsCallout variant="info" title="Personalização global" client:load>
            <p class="text-sm text-muted-foreground">
                Todos os subcomponentes do calendário aceitam <code>class</code>
                e <code>style</code> props para override. Assim, é possível adaptá-los
                ao tema da instituição sem alterar a lógica base.
            </p>
        </DocsCallout>
    </DocsSection>
    <!-- ============================================================= -->
    <!-- Parte 5/5: Extensões Futuras / Roadmap -->
    <!-- ============================================================= -->
    <DocsSection id="roadmap" title="Extensões Futuras / Roadmap" client:load>
        <p class="text-muted-foreground mb-4">
            O componente <strong>Calendário</strong> foi concebido como base sólida
            de visualização e gestão de avaliações académicas. No entanto, existem
            diversas áreas de expansão já mapeadas para versões futuras, alinhadas
            com a evolução do ecossistema Vue e das necessidades pedagógicas.
        </p>

        <h4 class="mt-4 font-semibold">1. Vistas adicionais</h4>
        <ul class="list-disc list-inside text-sm text-muted-foreground mt-2">
            <li>
                <strong>WeekView:</strong> visão semanal compacta, ideal para planeamento
                detalhado.
            </li>
            <li>
                <strong>AgendaView:</strong> listagem contínua de avaliações futuras,
                agrupadas por disciplina.
            </li>
            <li>
                <strong>TimelineView:</strong> linha temporal horizontal com marcações
                por tipo de avaliação.
            </li>
        </ul>

        <h4 class="mt-4 font-semibold">2. Sincronização externa</h4>
        <ul class="list-disc list-inside text-sm text-muted-foreground mt-2">
            <li>
                Exportação para <code>iCalendar (.ics)</code> e sincronização bidirecional.
            </li>
            <li>
                Integração com APIs institucionais (ex.: SIGARRA, Moodle, Google
                Classroom).
            </li>
            <li>
                Webhook para notificações automáticas de alterações de datas.
            </li>
        </ul>

        <h4 class="mt-4 font-semibold">3. Colaboração</h4>
        <p class="text-sm text-muted-foreground">
            Permitir que professores e estudantes adicionem anotações ou
            lembretes pessoais diretamente no calendário, sem afetar os dados
            oficiais.
        </p>

        <h4 class="mt-4 font-semibold">4. Inteligência Adaptativa</h4>
        <p class="text-sm text-muted-foreground">
            Planeia-se a introdução de um módulo preditivo, capaz de sugerir
            datas de estudo ideais com base na densidade de avaliações e
            desempenho histórico do aluno (módulo opcional).
        </p>

        <h4 class="mt-4 font-semibold">5. Extensão para dispositivos móveis</h4>
        <ul class="list-disc list-inside text-sm text-muted-foreground mt-2">
            <li>Gestos de swipe para navegar entre meses.</li>
            <li>Modo compacto adaptativo para ecrãs pequenos.</li>
            <li>Cache local e modo offline (PWA-ready).</li>
        </ul>

        <h4 class="mt-4 font-semibold">6. Observabilidade e Telemetria</h4>
        <p class="text-sm text-muted-foreground">
            Implementação futura de métricas de uso anónimas, recolhendo eventos
            como mudança de vista, número médio de avaliações carregadas e
            frequência de acessos. Estas métricas ajudarão a priorizar
            otimizações reais, baseadas em uso.
        </p>

        <DocsCallout variant="info" title="Governança de versões" client:load>
            <p class="text-sm text-muted-foreground">
                Cada extensão deve ser lançada sob um sistema de versionamento
                semântico:
                <code>major.minor.patch</code>. As alterações de API pública
                serão documentadas em changelogs no diretório <code
                    >docs/changelogs/</code
                >.
            </p>
        </DocsCallout>

        <h4 class="mt-6 font-semibold">7. Interoperabilidade futura</h4>
        <p class="text-sm text-muted-foreground">
            Uma das metas de médio prazo é converter o núcleo do calendário num
            <strong>componente web independente</strong> (<code
                >&lt;academic-calendar&gt;</code
            >), permitindo a integração com projetos não-Vue, como Astro puro,
            React ou Svelte.
        </p>
    </DocsSection>

    <!-- ============================================================= -->
    <!-- Conclusão -->
    <!-- ============================================================= -->
    <DocsSection id="conclusao" title="Conclusão" client:load>
        <p class="text-lg text-muted-foreground">
            O componente <strong>Calendário</strong> não é apenas uma representação
            visual das avaliações — é um <em
                >framework modular de organização académica</em
            >, construído com foco em clareza, previsibilidade e
            extensibilidade.
        </p>

        <p class="text-sm text-muted-foreground mt-3">
            A sua implementação demonstra boas práticas de design de componentes
            Vue 3, comunicação de eventos e integração de dados. O código é
            suficientemente genérico para ser reutilizado noutros contextos
            (ex.: planeamento de projetos ou gestão de prazos).
        </p>

        <DocsCallout variant="success" title="Resumo Final" client:load>
            <ul class="list-disc list-inside text-sm text-muted-foreground">
                <li>API reativa e extensível.</li>
                <li>Integração direta com <code>ucs.json</code>.</li>
                <li>Vistas modulares (Calendar, List, Heatmap).</li>
                <li>Escalabilidade comprovada em datasets grandes.</li>
                <li>Base sólida para futuras extensões inteligentes.</li>
            </ul>
        </DocsCallout>

        <p class="text-xs text-muted-foreground mt-6 italic">
            Versão do documento: 1.0.0 • Última atualização: Outubro 2025 Autor
            técnico: Equipa de UI/UX — Núcleo Académico Digital
        </p>
    </DocsSection>
</DocsLayout>
